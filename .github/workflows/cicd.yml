name: Node CI/CD with CDK, Docker, and ECR

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ./my-cdk-app/package-lock.json

      - name: Install dependencies
        working-directory: ./my-cdk-app
        run: npm ci

      - name: Build project
        working-directory: ./my-cdk-app
        run: npm run build

  security-check:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy

      - name: Trivy FS scan
        run: trivy fs --format table -o fs-report.json .

      - name: Install Gitleaks
        run: sudo apt-get install -y gitleaks

      - name: Gitleaks Code Scan
        run: gitleaks detect --source . --report-format json --report-path gitleaks-report.json

  test:
    runs-on: ubuntu-latest
    needs: security-check
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ./my-cdk-app/package-lock.json

      - name: Install dependencies
        working-directory: ./my-cdk-app
        run: npm ci

      - name: Run tests
        working-directory: ./my-cdk-app
        run: npm test

  deploy_ecr:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      ECR_URI: ${{ steps.set_ecr_uri.outputs.ECR_URI }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Install CDK project dependencies
        working-directory: ./my-cdk-app
        run: npm ci

      - name: Deploy ECR stack and capture URI
        id: set_ecr_uri
        working-directory: ./my-cdk-app
        run: |
          cdk deploy EcrStack --require-approval never --outputs-file outputs.json
          cat outputs.json
          ECR_URI=$(jq -r '.EcrStack.ECRRepoURI' outputs.json)
          echo "ECR_URI=$ECR_URI"
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV
          echo "::set-output name=ECR_URI::$ECR_URI"

  docker_build_and_push:
    runs-on: ubuntu-latest
    needs: deploy_ecr
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2


      - name: Build Docker image
        working-directory: ./my-cdk-app/app
        run: |
          echo "Building Docker image with tag ${{ needs.deploy_ecr.outputs.ECR_URI }}:latest"
          docker build -t ${{ needs.deploy_ecr.outputs.ECR_URI }}:latest .

      - name: Push Docker image
        run: docker push ${{ needs.deploy_ecr.outputs.ECR_URI }}:latest

  deploy_app:
    runs-on: ubuntu-latest
    needs: docker_build_and_push
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Install CDK project dependencies
        working-directory: ./my-cdk-app
        run: npm ci

      - name: Deploy all CDK stacks
        working-directory: ./my-cdk-app
        run: cdk deploy --all --require-approval never

  